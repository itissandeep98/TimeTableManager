{"version":3,"sources":["Components/Header.js","Components/Table.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","state","isNavOpen","toggleNav","bind","this","setState","Navbar","dark","expand","className","NavbarToggler","onClick","NavbarBrand","href","Collapse","isOpen","navbar","Nav","NavItem","Component","TableData","Spinner","Main","database","onChange","e","target","id","files","Row","Form","Label","htmlFor","Input","type","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oXAwCeA,G,wDAnCd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,WAAW,GAEZ,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBALC,E,wDASlBC,KAAKC,SAAS,CACbJ,WAAYG,KAAKJ,MAAMC,c,+BAKxB,OACC,oCACC,kBAACK,EAAA,EAAD,CAAQC,MAAI,EAACC,OAAO,MACnB,yBAAKC,UAAU,aACd,kBAACC,EAAA,EAAD,CAAeC,QAASP,KAAKF,YAC7B,kBAACU,EAAA,EAAD,CAAaH,UAAU,UAAUI,KAAK,KAAtC,sBACA,kBAACC,EAAA,EAAD,CAAUC,OAAQX,KAAKJ,MAAMC,UAAWe,QAAM,GAC7C,kBAACC,EAAA,EAAD,CAAKD,QAAM,GACV,kBAACE,EAAA,EAAD,e,GAxBaC,c,QCDAC,E,uKAEnB,OACC,6BACC,kBAACC,EAAA,EAAD,W,GAJmCF,aCElBG,E,kDACpB,WAAYvB,GAAO,IAAD,8BACjB,cAAMA,IACDC,MAAM,CACVuB,SAAS,IAEV,EAAKC,SAAS,EAAKA,SAASrB,KAAd,gBALG,E,qDAOTsB,GACRrB,KAAKC,SAAL,eACEoB,EAAEC,OAAOC,GAAIF,EAAEC,OAAOE,MAAM,O,+BAK9B,OACC,6BACC,kBAAC,EAAD,MACA,6BACA,yBAAKnB,UAAU,aACd,kBAACoB,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAOC,QAAQ,YAAf,4BACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOP,GAAG,WAAWH,SAAUpB,KAAKoB,aAGlD,6BACA,kBAACK,EAAA,EAAD,KACC,kBAAC,EAAD,a,GA5B4BV,aCOnBgB,MATf,WAEE,OACM,yBAAK1B,UAAU,OACb,kBAAC,EAAD,QCKU2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dc4c5233.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Navbar, NavbarBrand, NavbarToggler, Collapse, Nav, NavItem } from 'reactstrap';\nimport '../App.css'\n\nclass Header extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisNavOpen: false,\n\t\t};\n\t\tthis.toggleNav = this.toggleNav.bind(this);\n\t}\n\n\ttoggleNav() {\n\t\tthis.setState({\n\t\t\tisNavOpen: !this.state.isNavOpen\n\t\t});\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Navbar dark expand=\"md\">\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<NavbarToggler onClick={this.toggleNav} />\n\t\t\t\t\t\t<NavbarBrand className=\"mr-auto\" href=\"/\">Time Table Manager</NavbarBrand>\n\t\t\t\t\t\t<Collapse isOpen={this.state.isNavOpen} navbar>\n\t\t\t\t\t\t\t<Nav navbar>\n\t\t\t\t\t\t\t\t<NavItem>\n\n\t\t\t\t\t\t\t\t</NavItem>\n\t\t\t\t\t\t\t</Nav>\n\t\t\t\t\t\t</Collapse>\n\t\t\t\t\t</div>\n\t\t\t\t</Navbar>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default Header;","import React, { Component } from 'react'\nimport { Spinner } from 'reactstrap'\n\nexport default class TableData extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Spinner/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import React, { Component } from 'react'\nimport { Form, Input, Label, Row } from 'reactstrap'\nimport Header from './Header';\nimport TableData from \"./Table\";\n\nexport default class Main extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tdatabase:\"\"\n\t\t}\n\t\tthis.onChange=this.onChange.bind(this);\n\t}\n\tonChange(e){\n\t\tthis.setState({\n\t\t\t[e.target.id]:e.target.files[0]\n\t\t})\n\t\t\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Header/>\n\t\t\t\t<hr/>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t<Label htmlFor=\"database\">Upload the database file</Label>\n\t\t\t\t\t\t\t<Input type=\"file\" id=\"database\" onChange={this.onChange} />\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<hr/>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<TableData/>\n\t\t\t\t\t</Row>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import React from 'react';\nimport Main from \"./Components/Main\";\n\nfunction App() {\n\n  return (\n        <div className=\"App\">\n          <Main />\n        </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.css';\nimport 'bootstrap-social/bootstrap-social.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}