{"version":3,"sources":["Components/Header.js","Components/TimeTable/Rows.js","Components/TimeTable/Table.js","Components/TimeTable/Plot.js","Components/Main.js","store/ActionCreators.js","store/ActionTypes.js","App.js","serviceWorker.js","store/reducers/courseReducer.js","store/reducers/rootReducer.js","index.js","store/configureStore.js"],"names":["Header","props","state","isNavOpen","toggleNav","bind","this","setState","Navbar","dark","expand","className","NavbarToggler","onClick","NavbarBrand","href","Collapse","isOpen","navbar","Nav","NavItem","to","Component","Rows","course","cols","Object","keys","map","field","Table","Cell","Row","TableData","data","slice","headers","rows","header","HeaderCell","celled","striped","definition","selectable","responsive","Body","Plot","courses","schedule","file","handleCourseChange","updateSchedule","onChange","temp","length","concat","e","target","id","files","reader","FileReader","readAsText","onloadend","json","csvJSON","result","timetable","event","value","csv","lines","split","i","obj","currentline","j","replace","push","courselist","key","Spinner","text","disabled","Form","Field","Input","type","Dropdown","placeholder","fluid","multiple","search","openOnFocus","clearable","selection","options","Main","collectCourse","fetchCourse","setInterval","path","component","withRouter","connect","dispatch","a","axios","get","baseUrl","then","response","success","errmess","catch","error","App","basename","process","Boolean","window","location","hostname","match","initState","courseReducer","action","rootReducer","combineReducers","store","persistedState","serializedState","localStorage","getItem","JSON","parse","console","log","loadFromLocalStorage","createStore","applyMiddleware","thunk","logger","subscribe","stringify","setItem","saveToLocalStorage","getState","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4WA0CeA,E,kDApCd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,WAAW,GAEZ,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBALC,E,wDASlBC,KAAKC,SAAS,CACbJ,WAAYG,KAAKJ,MAAMC,c,+BAKxB,OACC,oCACC,kBAACK,EAAA,EAAD,CAAQC,MAAI,EAACC,OAAO,MACnB,yBAAKC,UAAU,aACd,kBAACC,EAAA,EAAD,CAAeC,QAASP,KAAKF,YAC7B,kBAACU,EAAA,EAAD,CAAaH,UAAU,UAAUI,KAAK,KAAtC,sBACA,kBAACC,EAAA,EAAD,CAAUC,OAAQX,KAAKJ,MAAMC,UAAWe,QAAM,GAC7C,kBAACC,EAAA,EAAD,CAAKD,QAAM,GACV,kBAACE,EAAA,EAAD,KACC,kBAAC,IAAD,CAAST,UAAU,WAAWU,GAAG,SAAQ,0BAAMV,UAAU,qBAAzD,cAML,kC,GA/BiBW,a,iCCFN,SAASC,EAAT,GAAyB,IAAVC,EAAS,EAATA,OACzBC,EAAOC,OAAOC,KAAKH,GAAQI,KAAI,SAACC,GACnC,OAAO,kBAACC,EAAA,EAAMC,KAAP,KAAcP,EAAOK,OAE7B,OACC,kBAACC,EAAA,EAAME,IAAP,KACEP,G,ICLiBQ,E,uKAEnB,IAAIC,EAAO5B,KAAKL,MAAMiC,KAAKC,MAAM,GAC7BC,EAAU9B,KAAKL,MAAMiC,KAAK,GAC9B,GAAIA,EAAM,CACT,IAAIG,EAAOH,EAAKN,KAAI,SAAAJ,GACnB,OAAO,kBAACD,EAAD,CAAMC,OAAQA,OAIlBc,EAASF,EAAQR,KAAI,SAACC,GACzB,OAAO,kBAACC,EAAA,EAAMS,WAAP,KAAoBV,MAG5B,OACC,yBAAKlB,UAAU,eACd,kBAACmB,EAAA,EAAD,CAAOU,QAAM,EAACC,SAAO,EAACC,YAAU,EAACC,YAAU,EAACC,YAAU,GACrD,kBAACd,EAAA,EAAM9B,OAAP,KACEsC,GAEF,kBAACR,EAAA,EAAMe,KAAP,KACER,KAOL,OAAO,+DAAoC,0BAAM1B,UAAU,sB,GA5BvBW,a,oCCClBwB,E,kDACpB,WAAY7C,GAAO,IAAD,6BACjB,cAAMA,IASDC,MAAM,CACV6C,QAAQ,GACRC,SAVc,CACd,CAAC,GAAI,aAAc,WAAY,aAAc,YAAa,YAAa,aACvE,CAAC,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,IAC5B,CAAC,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,IAC5B,CAAC,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,IAC5B,CAAC,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,IAC5B,CAAC,MAAO,GAAI,GAAI,GAAI,GAAI,GAAI,KAK5BC,KAAK,IAEN,EAAKC,mBAAmB,EAAKA,mBAAmB7C,KAAxB,gBACxB,EAAK8C,eAAe,EAAKA,eAAe9C,KAApB,gBACpB,EAAK+C,SAAW,EAAKA,SAAS/C,KAAd,gBAjBC,E,6DAoBjB,IAAIgD,EAAK/C,KAAKJ,MAAM8C,SAChB1C,KAAKJ,MAAM6C,QAAQzC,KAAKJ,MAAM6C,QAAQO,OAAS,KAClDD,EAAK,GAAG,GAAGA,EAAK,GAAG,GAAGE,OAAOjD,KAAKJ,MAAM6C,QAAQzC,KAAKJ,MAAM6C,QAAQO,OAAO,IAC1EhD,KAAKC,SAAS,CACbyC,SAASK,O,+BAMHG,GAAI,IAAD,OACXlD,KAAKC,SAAL,eACEiD,EAAEC,OAAOC,GAAKF,EAAEC,OAAOE,MAAM,KAC5B,WACF,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,WAAW,EAAK5D,MAAM+C,MAC7BW,EAAOG,UAAY,WAClB,IAAIC,EAAO,EAAKC,QAAQL,EAAOM,QAC/B,EAAK3D,SAAS,CACb4D,UAAWH,U,yCAQII,EAAOF,GAAS,IAAD,OACzBG,GAAUH,GAAUE,EAAMX,QAA1BY,MACR/D,KAAKC,SAAL,eACID,KAAKJ,MAAM6C,QADf,CAECA,QAASsB,KACR,kBAAI,EAAKlB,sB,8BAGJmB,GAQP,IANA,IAAIC,EAAQD,EAAIE,MAAM,MAElBN,EAAS,GAET9B,EAAUmC,EAAM,GAAGC,MAAM,KAEpBC,EAAI,EAAGA,EAAIF,EAAMjB,OAAQmB,IAAK,CAKtC,IAHA,IAAIC,EAAM,GACNC,EAAcJ,EAAME,GAAGD,MAAM,KAExBI,EAAI,EAAGA,EAAIxC,EAAQkB,OAAQsB,IACnCD,EAAYC,GAAKD,EAAYC,GAAGC,QAAQ,KAAK,IAC7CH,EAAItC,EAAQwC,IAAMD,EAAYC,GAAGJ,MAAM,KAExCN,EAAOY,KAAKJ,GAEb,OAAOR,I,+BAKP,IAAIa,EAAW,CACd,CAACC,IAAI,UAAWX,MAAM,kBAACY,EAAA,EAAD,MAAYC,KAAK,kBAACD,EAAA,EAAD,MAAYE,UAAS,IAK7D,OAHG7E,KAAKL,MAAM8E,aACbA,EAAWzE,KAAKL,MAAM8E,YAGtB,yBAAKpE,UAAU,aAEd,kBAACyE,EAAA,EAAD,KACC,kBAACA,EAAA,EAAKC,MAAN,KACC,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAO7B,GAAG,OAAON,SAAU9C,KAAK8C,YAE7C,kBAACgC,EAAA,EAAKC,MAAN,KACA,kBAACG,EAAA,EAAD,CAAUC,YAAY,UAAUC,OAAK,EAACC,UAAQ,EAACC,QAAM,EAACC,aAAW,EAACC,WAAS,EAACC,WAAS,EAACC,QAASjB,EAAYV,MAAO/D,KAAKJ,MAAM6C,QAASK,SAAU9C,KAAK4C,uBAItJ,6BACA,kBAAC,EAAD,CAAWhB,KAAM5B,KAAKJ,MAAM8C,gB,GAnGE1B,a,qDCE5B2E,E,kDACL,WAAYhG,GAAQ,IAAD,8BAClB,cAAMA,IACDiG,cAAgB,EAAKA,cAAc7F,KAAnB,gBAFH,E,4DAMbC,KAAKL,MAAM8C,QAAQA,SACvBzC,KAAKL,MAAMkG,gB,+BAIH,IAAD,OAER,OADAC,YAAY9F,KAAK4F,cAAe,KAE/B,6BACC,kBAAC,EAAD,MACA,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOG,KAAK,QAAQC,UAAW,kBAAM,kBAAC,EAAD,CAAMvB,WAAY,EAAK9E,MAAM8C,QAAQA,aAC1E,kBAAC,IAAD,CAAU1B,GAAG,gB,GAnBCC,aAkCJiF,cAAWC,aATF,SAACtG,GACxB,MAAO,CACN6C,QAAS7C,EAAM6C,YAGU,SAAC0D,GAAD,MAAe,CACzCN,YAAa,kBAAMM,EChCnB,uCAAO,WAAOA,GAAP,SAAAC,EAAA,sEACOC,IAAMC,IAAIC,0CACrBC,MAAK,SAAAC,GACDA,EAAS7E,KAAK8E,QACjBP,EAAS,CAAElB,KCToB,uBDSoBxC,QAASgE,EAAS7E,KAAKa,UAE1E0D,EAAS,CAAElB,KCZmB,sBDYoB0B,QAAS,gCAE5DC,OAAM,SAAAC,GACNV,EAAS,CAAElB,KCfoB,sBDemB0B,QAAS,uCATvD,mFAAP,2DDmCyBT,CAA6CP,IGzBxDmB,MAXf,WAEE,OACE,kBAAC,IAAD,CAAeC,SAAUC,qBACvB,yBAAK3G,UAAU,OACb,kBAAC,EAAD,SCEY4G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mEChBAC,EAAY,GAcHC,EAZO,WAAgC,IAA/B3H,EAA8B,uDAAtB0H,EAAWE,EAAW,uCACpD,OAAQA,EAAOvC,MACd,IHLkC,uBGMjC,IAAIxC,EAAU+E,EAAO/E,QACrB,OAAO,eAAK7C,EAAZ,CAAmB6C,UAASkE,QAAS,OACtC,IHTiC,sBGUhC,OAAO,eAAK/G,EAAZ,CAAmB+G,QAASa,EAAOb,UACpC,QACC,OAAO/G,ICLK6H,EAJKC,YAAgB,CACnCjF,QAAS8E,ICOV,IAAMI,ECNwB,WAC7B,IAAMC,EAsBP,WACC,IACC,IAAMC,EAAgBC,aAAaC,QAAQ,kBAC3C,GAAqB,OAAlBF,EAAwB,OAC3B,OAAOG,KAAKC,MAAMJ,GACjB,MAAOhB,GAER,YADAqB,QAAQC,IAAItB,IA5BQuB,GACfT,EAAQU,YACbZ,EACAG,EACAU,YAAgBC,IAAOC,MAKxB,OAFAb,EAAMc,WAAU,kBAKjB,SAA4B7I,GAC3B,IACC,IAAMiI,EAAgBG,KAAKU,UAAU9I,GACrCkI,aAAaa,QAAQ,iBAAiBd,GAEvC,MAAM3E,GACLgF,QAAQC,IAAIjF,IAXO0F,CAAmBjB,EAAMkB,eAEtClB,EDJMmB,GAEdC,IAASC,OACP,kBAAC,IAAD,CAAUrB,MAAOA,GACjB,kBAAC,IAAMsB,WAAP,KACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,SHgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEd5C,OAAM,SAAAC,GACLqB,QAAQrB,MAAMA,EAAM4C,c","file":"static/js/main.6d6e7cca.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Navbar, NavbarBrand, NavbarToggler, Collapse, Nav, NavItem } from 'reactstrap';\nimport '../App.css'\nimport { NavLink } from 'react-router-dom';\n\nclass Header extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisNavOpen: false,\n\t\t};\n\t\tthis.toggleNav = this.toggleNav.bind(this);\n\t}\n\n\ttoggleNav() {\n\t\tthis.setState({\n\t\t\tisNavOpen: !this.state.isNavOpen\n\t\t});\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Navbar dark expand=\"md\">\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<NavbarToggler onClick={this.toggleNav} />\n\t\t\t\t\t\t<NavbarBrand className=\"mr-auto\" href=\"/\">Time Table Manager</NavbarBrand>\n\t\t\t\t\t\t<Collapse isOpen={this.state.isNavOpen} navbar>\n\t\t\t\t\t\t\t<Nav navbar>\n\t\t\t\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t\t\t\t<NavLink className=\"nav-link\" to='/home'><span className=\"fa fa-home fa-lg\" /> Home</NavLink>\n\t\t\t\t\t\t\t\t</NavItem>\n\t\t\t\t\t\t\t</Nav>\n\t\t\t\t\t\t</Collapse>\n\t\t\t\t\t</div>\n\t\t\t\t</Navbar>\n\t\t\t\t<hr />\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default Header;","import React from 'react'\nimport { Table } from 'semantic-ui-react'\n\nexport default function Rows({course}) {\n\tvar cols = Object.keys(course).map((field) => {\n\t\treturn <Table.Cell >{course[field]}</Table.Cell>\n\t})\t\n\treturn (\n\t\t<Table.Row>\n\t\t\t{cols}\n\t\t</Table.Row>\n\t)\n}\n","import React, { Component } from 'react'\nimport Rows from './Rows';\nimport { Table } from 'semantic-ui-react';\n\nexport default class TableData extends Component {\n\trender() {\n\t\tvar data = this.props.data.slice(1);\n\t\tvar headers = this.props.data[0]\n\t\tif (data) {\n\t\t\tvar rows = data.map(course => {\n\t\t\t\treturn <Rows course={course} />\n\n\t\t\t})\n\n\t\t\tvar header = headers.map((field) => {\n\t\t\t\treturn <Table.HeaderCell >{field}</Table.HeaderCell>\n\t\t\t})\n\n\t\t\treturn (\n\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t<Table celled striped definition selectable responsive>\n\t\t\t\t\t\t<Table.Header>\n\t\t\t\t\t\t\t{header}\n\t\t\t\t\t\t</Table.Header>\n\t\t\t\t\t\t<Table.Body>\n\t\t\t\t\t\t\t{rows}\n\t\t\t\t\t\t</Table.Body>\n\t\t\t\t\t</Table>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\telse {\n\t\t\treturn <h2> Try Uploading the database file<span className=\"fa fa-filter\" /></h2>\n\t\t}\n\t}\n}\n","import React, { Component } from 'react'\nimport TableData from './Table'\nimport { Form, Dropdown, Input } from 'semantic-ui-react'\nimport { Spinner } from 'reactstrap';\n\nexport default class Plot extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tvar schedule = [\n\t\t\t[\"\", \"9:00-10:30\", \"10:30-12\", \"12:00-1:30\", \"1:30-2:30\", \"2:30-4:00\", \"4:00-5:30\"],\n\t\t\t[\"Mon\", \"\", \"\", \"\", \"\", \"\", \"\",],\n\t\t\t[\"Tue\", \"\", \"\", \"\", \"\", \"\", \"\",],\n\t\t\t[\"Wed\", \"\", \"\", \"\", \"\", \"\", \"\",],\n\t\t\t[\"Thu\", \"\", \"\", \"\", \"\", \"\", \"\",],\n\t\t\t[\"Fri\", \"\", \"\", \"\", \"\", \"\", \"\",]\n\t\t]\t\n\t\tthis.state={\n\t\t\tcourses:[],\n\t\t\tschedule,\n\t\t\tfile:\"\",\n\t\t}\n\t\tthis.handleCourseChange=this.handleCourseChange.bind(this);\n\t\tthis.updateSchedule=this.updateSchedule.bind(this);\n\t\tthis.onChange = this.onChange.bind(this);\n\t}\n\tupdateSchedule(){\n\t\tvar temp=this.state.schedule\n\t\tif (this.state.courses[this.state.courses.length - 1]){\n\t\t\ttemp[1][1]=temp[1][1].concat(this.state.courses[this.state.courses.length-1])\n\t\t\tthis.setState({\n\t\t\t\tschedule:temp\n\t\t\t})\t\t\n\t\t}\n\t\t\n\t}\n\n\tonChange(e) {\n\t\tthis.setState({\n\t\t\t[e.target.id]: e.target.files[0]\n\t\t}, () => {\n\t\t\tvar reader = new FileReader();\n\t\t\treader.readAsText(this.state.file)\n\t\t\treader.onloadend = () => {\n\t\t\t\tvar json = this.csvJSON(reader.result);\n\t\t\t\tthis.setState({\n\t\t\t\t\ttimetable: json\n\t\t\t\t})\n\n\t\t\t}\n\t\t})\n\n\t}\n\n\thandleCourseChange(event, result) {\n\t\tconst { value } = result || event.target;\n\t\tthis.setState({\n\t\t\t...this.state.courses,\n\t\t\tcourses: value\n\t\t},()=>this.updateSchedule());\n\t}\n\n\tcsvJSON(csv) {\n\n\t\tvar lines = csv.split(\"\\n\");\n\n\t\tvar result = [];\n\n\t\tvar headers = lines[0].split(\",\");\n\n\t\tfor (var i = 0; i < lines.length; i++) {\n\n\t\t\tvar obj = {};\n\t\t\tvar currentline = lines[i].split(\",\");\n\n\t\t\tfor (var j = 0; j < headers.length; j++) {\n\t\t\t\tcurrentline[j] = currentline[j].replace(\"\\r\",\"\")\n\t\t\t\tobj[headers[j]] = currentline[j].split(\" \");\n\t\t\t}\n\t\t\tresult.push(obj);\n\t\t}\n\t\treturn result;\n\t}\n\t\n\trender() {\n\t\t\t\n\t\tvar courselist=[\n\t\t\t{key:\"loading\", value:<Spinner/>, text:<Spinner/>, disabled:true}\n\t\t]\n\t\tif(this.props.courselist)\n\t\t\tcourselist=this.props.courselist\n\t\t\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t\n\t\t\t\t<Form>\n\t\t\t\t\t<Form.Field>\n\t\t\t\t\t\t<Input type=\"file\" id=\"file\" onChange={this.onChange} />\n\t\t\t\t\t</Form.Field>\n\t\t\t\t\t<Form.Field>\n\t\t\t\t\t<Dropdown placeholder=\"Courses\" fluid multiple search openOnFocus clearable selection options={courselist} value={this.state.courses} onChange={this.handleCourseChange} />\n\t\t\t\t\t</Form.Field>\n\n\t\t\t\t</Form>\n\t\t\t\t<hr/>\n\t\t\t\t<TableData data={this.state.schedule} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import React, { Component } from 'react'\nimport Header from './Header'\nimport { withRouter, Switch, Route, Redirect } from 'react-router-dom'\nimport Plot from './TimeTable/Plot'\nimport {courseFetchAction} from '../store/ActionCreators'\nimport { connect } from 'react-redux'\n\nclass Main extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.collectCourse = this.collectCourse.bind(this);\n\t}\n\n\tcollectCourse() {\t\t\n\t\tif (!this.props.courses.courses) {\n\t\t\tthis.props.fetchCourse()\n\t\t}\n\t}\n\n\trender() {\n\t\tsetInterval(this.collectCourse, 10000); //fetch course every 1 min only if courses list is empty\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Header />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/home\" component={() => <Plot courselist={this.props.courses.courses}/>} />\n\t\t\t\t\t<Redirect to=\"/home\" />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t)\n\t}\n}\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tcourses: state.courses,\n\t}\n}\nconst mapDispatchToProps = (dispatch) => ({\n\tfetchCourse: () => dispatch(courseFetchAction()),\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","import axios from \"axios\";\nimport * as ActionTypes from \"./ActionTypes\";\nimport { baseUrl } from \"../shared/baseUrl\";\n\n\nexport const courseFetchAction = () => {\n\treturn async (dispatch) => {\n\t\treturn await axios.get(baseUrl+'/courses')\n\t\t\t.then(response => {\n\t\t\t\tif (response.data.success)\n\t\t\t\t\tdispatch({ type: ActionTypes.COURSE_FETCH_SUCCESS, courses: response.data.courses })\n\t\t\t\telse\n\t\t\t\t\tdispatch({ type: ActionTypes.COURSE_FETCH_FAILED, errmess: \"Courses Can't be Fetched\" })\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tdispatch({ type: ActionTypes.COURSE_FETCH_FAILED, errmess: \"Error in connection with Server\" })\n\t\t\t})\n\t}\n}","export const COURSE_FETCH_FAILED = 'COURSE_FETCH_FAILED';\nexport const COURSE_FETCH_SUCCESS = 'COURSE_FETCH_SUCCESS';","import React from 'react';\nimport Main from \"./Components/Main\";\nimport { BrowserRouter } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Main />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as ActionTypes from \"../ActionTypes\";\n\nconst initState = {}\n\nconst courseReducer = (state = initState, action) => {\n\tswitch (action.type) {\n\t\tcase ActionTypes.COURSE_FETCH_SUCCESS:\n\t\t\tvar courses = action.courses;\n\t\t\treturn { ...state, courses, errmess: null };\n\t\tcase ActionTypes.COURSE_FETCH_FAILED:\n\t\t\treturn { ...state, errmess: action.errmess};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default courseReducer;","import { combineReducers } from 'redux';\nimport courseReducer from './courseReducer';\n\nconst rootReducer = combineReducers({\n\tcourses: courseReducer,\n})\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport { configureStore } from './store/configureStore';\nimport { Provider } from 'react-redux';\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store} >\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from './reducers/rootReducer';\n\nexport const configureStore = () => {\n\tconst persistedState=loadFromLocalStorage();\n\tconst store = createStore(\n\t\trootReducer, \n\t\tpersistedState,\n\t\tapplyMiddleware(thunk, logger)\n\t);\n\n\tstore.subscribe(()=>saveToLocalStorage(store.getState()))\n\n\treturn store;\n}\n\nfunction saveToLocalStorage(state) {\n\ttry{\n\t\tconst serializedState=JSON.stringify(state);\n\t\tlocalStorage.setItem('timetablestate',serializedState);\n\t}\n\tcatch(e){\n\t\tconsole.log(e)\n\t}\n}\n\nfunction loadFromLocalStorage() {\n\ttry {\n\t\tconst serializedState=localStorage.getItem('timetablestate')\n\t\tif(serializedState===null) return undefined;\n\t\treturn JSON.parse(serializedState)\n\t} catch (error) {\n\t\tconsole.log(error)\n\t\treturn undefined\n\t}\n\t\n}"],"sourceRoot":""}